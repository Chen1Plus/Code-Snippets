{
    "Standard Starter Template": {
        "prefix": "sst",
        "body": [
            "#include <stdio.h>",
            "",
            "int main () {",
            "\t${0:/* code here */}",
            "\treturn 0;",
            "}"
        ],
        "description": "A standard starter template for a C program"
    },
    "Stdlib Variant Starter Template": {
        "prefix": "libsst",
        "body": [
            "#include <stdio.h>",
            "#include <stdlib.h>",
            "",
            "int main () {",
            "\t${0:/* code here */}",
            "\treturn 0;",
            "}"
        ],
        "description": "A standard starter template for a C program with stdlib included"
    },
    "If statement": {
        "prefix": "if",
        "body": [
            "if (${1:/* condition */}) {",
            "\t${0:/* code here */}",
            "}"
        ],
        "description": "Creates an if statement"
    },
    "Else if statement": {
        "prefix": "elif",
        "body": [
            "else if (${1:/* condition */}) {",
            "\t${0:/* code here */}",
            "}"
        ],
        "description": "Creates an else if statement"
    },
    "Else statement": {
        "prefix": "else",
        "body": [
            "else {",
            "\t${0:/* code here */}",
            "}"
        ],
        "description": "Creates an else statement"
    },
    "For loop": {
        "prefix": "for",
        "body": [
            "for (int ${1:i} = 0; ${1:i} < ${2:count}; ${1:i}++) {",
            "\t${0:/* code here */}",
            "}"
        ],
        "description": "Creates a for loop that runs for a certain number if iterations"
    },
    "While loop": {
        "prefix": "while",
        "body": [
            "while (${1:/* condition */}) {",
            "\t${0:/* code here */}",
            "}"
        ],
        "description": "Creates a while loop"
    },
    "Do...while loop": {
        "prefix": "do",
        "body": [
            "do {",
            "\t${0:/* code here */}",
            "} while(${1:/* condition */})"
        ],
        "description": "Creates a do...while loop"
    },
    "Create linked list": {
        "prefix": "clist",
        "body": [
            "typedef struct _node * Link;",
            "typedef struct _node node;",
            "struct _node {",
            "    int value;",
            "    Link next;",
            "};"
        ],
        "description": "Creates a linked list template"
    },
    "enum": {
        "prefix": "enum",
        "body": [
            "enum ${MyEnum} {",
            "\t$1,",
            "};"
        ],
        "description": "Code snippet for enum"
    },
    "#ifdef": {
        "prefix": "#ifdef",
        "body": [
            "#ifdef ${DEBUG}",
            "$1",
            "#endif // ${DEBUG}"
        ],
        "description": "Code snippet for #ifdef"
    },
    "#ifndef": {
        "prefix": "#ifndef",
        "body": [
            "#ifndef ${1:1}",
            "$2",
            "#endif // !$1"
        ],
        "description": "Code snippet for #ifndef"
    },
    "#if": {
        "prefix": "#if",
        "body": [
            "#ifdef ${1:0}",
            "$2",
            "#endif // $1"
        ],
        "description": "Code snippet for #if"
    },
    "struct": {
        "prefix": "struct",
        "body": [
            "struct ${MyStruct}",
            "{",
			"	$1",
            "};"
        ],
        "description": "Code snippet for struct"
    },
    "switch": {
        "prefix": "switch",
        "body": [
            "switch (${switch_on})",
            "{",
            "default:",
			"	break;$1",
            "}"
        ],
        "description": "Code snippet for switch statement"
    },
    "union": {
        "prefix": "union",
        "body": [
            "union ${MyUnion}",
            "{",
			"	$1",
            "};"
        ],
        "description": "Code snippet for union"
    },
    "#inc": {
        "prefix": "#inc",
        "body": [
            "#include \"$1\""
        ],
        "description": "Code snippet for #include \" \""
    },
    "#inc<": {
        "prefix": "#inc<",
        "body": [
            "#include <$1>"
        ],
        "description": "Code snippet for #include \" \""
    },
    "#def": {
        "prefix": "#def",
        "body": [
            "#define \"$1\" \"$2\" "
        ],
        "description": "Code snippet for #define \" \""
    },
    "Create definition for virtual table": {
        "prefix": "vtdef",
        "body": [
            "typedef struct ${1:ClassName}{",
            "    struct ${2:$1VT}* vt;    ",
            "};",
            "",
            "typedef struct $2",
            "{",
            "    // Virtual Table Function definitions",
            "} ${3:vt$1};",
            "",
            "",
            "int $1Init(struct $1 *self);",
            "int $1Destroy(struct $1 **self);"
        ],
        "description": "Create definition for virtual table"
    },
    "Create function for virtual table": {
        "prefix": "vtfunc",
        "body": [
            "${1:void} (*${2:functionName})(struct ${3:ClassName} *self)"
        ],
        "description": "Create function for virtual table"
    },
    "Print variable of type float (2 decimal places)": {
        "prefix": "pflo",
        "body": [
            "printf(\"$0 :>> %.2f\\n\", $0);"
        ],
        "description": "Calls printf() to log value of variable of type float rounded to 2 decimal places"
    },
    "Print variable of type integer": {
        "prefix": "pint",
        "body": [
            "printf(\"$0 :>> %d\\n\", $0);"
        ],
        "description": "Calls printf() to log value of variable of type signed integer"
    },
    "Print variable of type char": {
        "prefix": "pcha",
        "body": [
            "printf(\"$0 :>> %c\\n\", $0);"
        ],
        "description": "Calls printf() to log value of variable of type char"
    },
    "Print variable of type pointer": {
        "prefix": "ppoint",
        "body": [
            "printf(\"$0 :>> %p\\n\", (void *) $0);"
        ],
        "description": "Calls printf() to log value of variable of type pointer"
    },
    "Print variable of type size_t": {
        "prefix": "psiz",
        "body": [
            "printf(\"$0 :>> %zu\\n\", $0);"
        ],
        "description": "Calls printf() to log value of variable of type size_t"
    },
    "Allocate memory using calloc": {
        "prefix": "cal",
        "body": [
            "$1*ptr = ($1*)calloc($2, sizeof($1));",
            "",
            "if (ptr == NULL)",
            "{",
            "  printf(\"Memory allocation failed!\\n\");",
            "  exit(0);",
            "}",
            "",
            "free(ptr);"
        ],
        "description": "Allocates memory to a pointer variable using calloc(), then deallocates using free()."
    },
    "Creates a header include guard": {
        "prefix": "ig",
        "body": [
            "#ifndef ${TM_FILENAME/(?:^.*\\\\)?(\\w+)\\W?/${1:/upcase}_/g}",
            "#define ${TM_FILENAME/(?:^.*\\\\)?(\\w+)\\W?/${1:/upcase}_/g}",
            "",
            "// Code for header body",
            "",
            "#endif //${TM_FILENAME/(?:^.*\\\\)?(\\w+)\\W?/${1:/upcase}_/g}"
        ],
        "description": "Creates header include guard based on file name"
    }
}